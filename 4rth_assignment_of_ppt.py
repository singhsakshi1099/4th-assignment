# -*- coding: utf-8 -*-
"""4rth assignment of ppt

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jOeGj0X5GjIeIhMUXCvvi_9Ub0r8jvkz
"""

#first solution

def find_common_elements(arr1, arr2, arr3):
    ptr1 = ptr2 = ptr3 = 0
    result = []

    while ptr1 < len(arr1) and ptr2 < len(arr2) and ptr3 < len(arr3):
        if arr1[ptr1] == arr2[ptr2] == arr3[ptr3]:
            result.append(arr1[ptr1])
            ptr1 += 1
            ptr2 += 1
            ptr3 += 1
        elif arr1[ptr1] < arr2[ptr2]:
            ptr1 += 1
        elif arr2[ptr2] < arr3[ptr3]:
            ptr2 += 1
        else:
            ptr3 += 1

    return result

# Test case
arr1 = [1, 2, 3, 4, 5]
arr2 = [1, 2, 5, 7, 9]
arr3 = [1, 3, 4, 5, 8]

common_elements = find_common_elements(arr1, arr2, arr3)
print(common_elements)

#second solution
def find_missing_elements(nums1, nums2):
    set1 = set(nums1)
    set2 = set(nums2)

    diff1 = set1 - set2
    diff2 = set2 - set1

    return [list(diff1), list(diff2)]

# Test case
nums1 = [1, 2, 3]
nums2 = [2, 4, 6]

answer = find_missing_elements(nums1, nums2)
print(answer)

#thrid solution
def transpose(matrix):
    rows = len(matrix)
    cols = len(matrix[0])

    # Create the transpose matrix
    transpose = [[0] * rows for _ in range(cols)]

    for i in range(rows):
        for j in range(cols):
            transpose[j][i] = matrix[i][j]

    return transpose

# Test case
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
transposed_matrix = transpose(matrix)
print(transposed_matrix)

#fourth solution
def arrayPairSum(nums):
    nums.sort()
    max_sum = 0
    for i in range(0, len(nums), 2):
        max_sum += nums[i]
    return max_sum

# Test case
nums = [1, 4, 3, 2]
maximized_sum = arrayPairSum(nums)
print(maximized_sum)

#fifth solution
def arrangeCoins(n):
    row = 0
    total = 0

    while total <= n:
        row += 1
        total += row

    return row - 1

# Test case
n = 5
complete_rows = arrangeCoins(n)
print(complete_rows)

#sixth solution
def sortedSquares(nums):
    result = []

    for num in nums:
        result.append(num * num)

    result.sort()

    return result

# Test case
nums = [-4, -1, 0, 3, 10]
squared_nums = sortedSquares(nums)
print(squared_nums)